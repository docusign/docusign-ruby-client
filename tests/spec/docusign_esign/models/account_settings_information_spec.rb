require 'docusign_esign/models/account_settings_information'

describe DocuSign_eSign::AccountSettingsInformation do
  describe '.attribute_map' do
    it 'returns a map between variable names and JSON keys', :aggregate_failures do
      map = DocuSign_eSign::AccountSettingsInformation.attribute_map

      expect(map[:access_code_format]).to eq(:accessCodeFormat)
      expect(map[:account_date_time_format]).to eq(:accountDateTimeFormat)
      expect(map[:account_date_time_format_metadata]).to eq(:accountDateTimeFormatMetadata)
      expect(map[:account_default_language]).to eq(:accountDefaultLanguage)
      expect(map[:account_default_language_metadata]).to eq(:accountDefaultLanguageMetadata)
      expect(map[:account_name]).to eq(:accountName)
      expect(map[:account_name_metadata]).to eq(:accountNameMetadata)
      expect(map[:account_notification]).to eq(:accountNotification)
      expect(map[:account_ui_settings]).to eq(:accountUISettings)
      expect(map[:adopt_sig_config]).to eq(:adoptSigConfig)
      expect(map[:adopt_sig_config_metadata]).to eq(:adoptSigConfigMetadata)
      expect(map[:advanced_correct]).to eq(:advancedCorrect)
      expect(map[:advanced_correct_metadata]).to eq(:advancedCorrectMetadata)
      expect(map[:allow_access_code_format]).to eq(:allowAccessCodeFormat)
      expect(map[:allow_access_code_format_metadata]).to eq(:allowAccessCodeFormatMetadata)
      expect(map[:allow_account_management_granular]).to eq(:allowAccountManagementGranular)
      expect(map[:allow_account_management_granular_metadata]).to eq(:allowAccountManagementGranularMetadata)
      expect(map[:allow_account_member_name_change]).to eq(:allowAccountMemberNameChange)
      expect(map[:allow_account_member_name_change_metadata]).to eq(:allowAccountMemberNameChangeMetadata)
      expect(map[:allow_advanced_recipient_routing_conditional]).to eq(:allowAdvancedRecipientRoutingConditional)
      expect(map[:allow_advanced_recipient_routing_conditional_metadata]).to eq(:allowAdvancedRecipientRoutingConditionalMetadata)
      expect(map[:allow_agent_name_email_edit]).to eq(:allowAgentNameEmailEdit)
      expect(map[:allow_agent_name_email_edit_metadata]).to eq(:allowAgentNameEmailEditMetadata)
      expect(map[:allow_agreement_actions]).to eq(:allowAgreementActions)
      expect(map[:allow_agreement_actions_metadata]).to eq(:allowAgreementActionsMetadata)
      expect(map[:allow_auto_nav_settings]).to eq(:allowAutoNavSettings)
      expect(map[:allow_auto_nav_settings_metadata]).to eq(:allowAutoNavSettingsMetadata)
      expect(map[:allow_auto_tagging]).to eq(:allowAutoTagging)
      expect(map[:allow_auto_tagging_metadata]).to eq(:allowAutoTaggingMetadata)
      expect(map[:allow_bulk_send]).to eq(:allowBulkSend)
      expect(map[:allow_bulk_send_metadata]).to eq(:allowBulkSendMetadata)
      expect(map[:allow_cd_withdraw]).to eq(:allowCDWithdraw)
      expect(map[:allow_cd_withdraw_metadata]).to eq(:allowCDWithdrawMetadata)
      expect(map[:allow_connect_http_listener_configs]).to eq(:allowConnectHttpListenerConfigs)
      expect(map[:allow_connect_send_finish_later]).to eq(:allowConnectSendFinishLater)
      expect(map[:allow_connect_send_finish_later_metadata]).to eq(:allowConnectSendFinishLaterMetadata)
      expect(map[:allow_connect_unified_payload_ui]).to eq(:allowConnectUnifiedPayloadUI)
      expect(map[:allow_consumer_disclosure_override]).to eq(:allowConsumerDisclosureOverride)
      expect(map[:allow_consumer_disclosure_override_metadata]).to eq(:allowConsumerDisclosureOverrideMetadata)
      expect(map[:allow_data_download]).to eq(:allowDataDownload)
      expect(map[:allow_data_download_metadata]).to eq(:allowDataDownloadMetadata)
      expect(map[:allow_document_disclosures]).to eq(:allowDocumentDisclosures)
      expect(map[:allow_document_disclosures_metadata]).to eq(:allowDocumentDisclosuresMetadata)
      expect(map[:allow_documents_on_signed_envelopes]).to eq(:allowDocumentsOnSignedEnvelopes)
      expect(map[:allow_documents_on_signed_envelopes_metadata]).to eq(:allowDocumentsOnSignedEnvelopesMetadata)
      expect(map[:allow_document_visibility]).to eq(:allowDocumentVisibility)
      expect(map[:allow_document_visibility_metadata]).to eq(:allowDocumentVisibilityMetadata)
      expect(map[:allow_e_hanko_stamps]).to eq(:allowEHankoStamps)
      expect(map[:allow_e_hanko_stamps_metadata]).to eq(:allowEHankoStampsMetadata)
      expect(map[:allow_e_note_e_original]).to eq(:allowENoteEOriginal)
      expect(map[:allow_e_note_e_original_metadata]).to eq(:allowENoteEOriginalMetadata)
      expect(map[:allow_envelope_correct]).to eq(:allowEnvelopeCorrect)
      expect(map[:allow_envelope_correct_metadata]).to eq(:allowEnvelopeCorrectMetadata)
      expect(map[:allow_envelope_custody_transfer]).to eq(:allowEnvelopeCustodyTransfer)
      expect(map[:allow_envelope_custody_transfer_metadata]).to eq(:allowEnvelopeCustodyTransferMetadata)
      expect(map[:allow_envelope_custom_fields]).to eq(:allowEnvelopeCustomFields)
      expect(map[:allow_envelope_custom_fields_metadata]).to eq(:allowEnvelopeCustomFieldsMetadata)
      expect(map[:allow_envelope_publish_reporting]).to eq(:allowEnvelopePublishReporting)
      expect(map[:allow_envelope_publish_reporting_metadata]).to eq(:allowEnvelopePublishReportingMetadata)
      expect(map[:allow_envelope_reporting]).to eq(:allowEnvelopeReporting)
      expect(map[:allow_envelope_reporting_metadata]).to eq(:allowEnvelopeReportingMetadata)
      expect(map[:allow_expression]).to eq(:allowExpression)
      expect(map[:allow_expression_metadata]).to eq(:allowExpressionMetadata)
      expect(map[:allow_express_signer_certificate]).to eq(:allowExpressSignerCertificate)
      expect(map[:allow_express_signer_certificate_metadata]).to eq(:allowExpressSignerCertificateMetadata)
      expect(map[:allow_extended_sending_resource_file]).to eq(:allowExtendedSendingResourceFile)
      expect(map[:allow_extended_sending_resource_file_metadata]).to eq(:allowExtendedSendingResourceFileMetadata)
      expect(map[:allow_external_signature_pad]).to eq(:allowExternalSignaturePad)
      expect(map[:allow_external_signature_pad_metadata]).to eq(:allowExternalSignaturePadMetadata)
      expect(map[:allow_idv_level1]).to eq(:allowIDVLevel1)
      expect(map[:allow_idv_level1_metadata]).to eq(:allowIDVLevel1Metadata)
      expect(map[:allow_idv_platform]).to eq(:allowIDVPlatform)
      expect(map[:allow_idv_platform_metadata]).to eq(:allowIDVPlatformMetadata)
      expect(map[:allow_in_person]).to eq(:allowInPerson)
      expect(map[:allow_in_person_metadata]).to eq(:allowInPersonMetadata)
      expect(map[:allow_managed_stamps]).to eq(:allowManagedStamps)
      expect(map[:allow_managed_stamps_metadata]).to eq(:allowManagedStampsMetadata)
      expect(map[:allow_markup]).to eq(:allowMarkup)
      expect(map[:allow_markup_metadata]).to eq(:allowMarkupMetadata)
      expect(map[:allow_member_time_zone]).to eq(:allowMemberTimeZone)
      expect(map[:allow_member_time_zone_metadata]).to eq(:allowMemberTimeZoneMetadata)
      expect(map[:allow_merge_fields]).to eq(:allowMergeFields)
      expect(map[:allow_merge_fields_metadata]).to eq(:allowMergeFieldsMetadata)
      expect(map[:allow_multiple_brand_profiles]).to eq(:allowMultipleBrandProfiles)
      expect(map[:allow_multiple_brand_profiles_metadata]).to eq(:allowMultipleBrandProfilesMetadata)
      expect(map[:allow_multiple_signer_attachments]).to eq(:allowMultipleSignerAttachments)
      expect(map[:allow_multiple_signer_attachments_metadata]).to eq(:allowMultipleSignerAttachmentsMetadata)
      expect(map[:allow_non_us_phone_auth]).to eq(:allowNonUSPhoneAuth)
      expect(map[:allow_non_us_phone_auth_metadata]).to eq(:allowNonUSPhoneAuthMetadata)
      expect(map[:allow_ocr_of_envelope_documents]).to eq(:allowOcrOfEnvelopeDocuments)
      expect(map[:allow_ocr_of_envelope_documents_metadata]).to eq(:allowOcrOfEnvelopeDocumentsMetadata)
      expect(map[:allow_offline_signing]).to eq(:allowOfflineSigning)
      expect(map[:allow_offline_signing_metadata]).to eq(:allowOfflineSigningMetadata)
      expect(map[:allow_open_trust_signer_certificate]).to eq(:allowOpenTrustSignerCertificate)
      expect(map[:allow_open_trust_signer_certificate_metadata]).to eq(:allowOpenTrustSignerCertificateMetadata)
      expect(map[:allow_organizations]).to eq(:allowOrganizations)
      expect(map[:allow_organizations_metadata]).to eq(:allowOrganizationsMetadata)
      expect(map[:allow_payment_processing]).to eq(:allowPaymentProcessing)
      expect(map[:allow_payment_processing_metadata]).to eq(:allowPaymentProcessingMetadata)
      expect(map[:allow_personal_signer_certificate]).to eq(:allowPersonalSignerCertificate)
      expect(map[:allow_personal_signer_certificate_metadata]).to eq(:allowPersonalSignerCertificateMetadata)
      expect(map[:allow_phone_authentication]).to eq(:allowPhoneAuthentication)
      expect(map[:allow_phone_authentication_metadata]).to eq(:allowPhoneAuthenticationMetadata)
      expect(map[:allow_phone_auth_override]).to eq(:allowPhoneAuthOverride)
      expect(map[:allow_phone_auth_override_metadata]).to eq(:allowPhoneAuthOverrideMetadata)
      expect(map[:allow_private_signing_groups]).to eq(:allowPrivateSigningGroups)
      expect(map[:allow_private_signing_groups_metadata]).to eq(:allowPrivateSigningGroupsMetadata)
      expect(map[:allow_reminders]).to eq(:allowReminders)
      expect(map[:allow_reminders_metadata]).to eq(:allowRemindersMetadata)
      expect(map[:allow_remote_notary]).to eq(:allowRemoteNotary)
      expect(map[:allow_remote_notary_metadata]).to eq(:allowRemoteNotaryMetadata)
      expect(map[:allow_resource_file_branding]).to eq(:allowResourceFileBranding)
      expect(map[:allow_resource_file_branding_metadata]).to eq(:allowResourceFileBrandingMetadata)
      expect(map[:allow_safe_bio_pharma_signer_certificate]).to eq(:allowSafeBioPharmaSignerCertificate)
      expect(map[:allow_safe_bio_pharma_signer_certificate_metadata]).to eq(:allowSafeBioPharmaSignerCertificateMetadata)
      expect(map[:allow_security_appliance]).to eq(:allowSecurityAppliance)
      expect(map[:allow_security_appliance_metadata]).to eq(:allowSecurityApplianceMetadata)
      expect(map[:allow_send_to_certified_delivery]).to eq(:allowSendToCertifiedDelivery)
      expect(map[:allow_send_to_certified_delivery_metadata]).to eq(:allowSendToCertifiedDeliveryMetadata)
      expect(map[:allow_send_to_intermediary]).to eq(:allowSendToIntermediary)
      expect(map[:allow_send_to_intermediary_metadata]).to eq(:allowSendToIntermediaryMetadata)
      expect(map[:allow_server_templates]).to eq(:allowServerTemplates)
      expect(map[:allow_server_templates_metadata]).to eq(:allowServerTemplatesMetadata)
      expect(map[:allow_set_embedded_recipient_start_url]).to eq(:allowSetEmbeddedRecipientStartURL)
      expect(map[:allow_set_embedded_recipient_start_url_metadata]).to eq(:allowSetEmbeddedRecipientStartURLMetadata)
      expect(map[:allow_shared_tabs]).to eq(:allowSharedTabs)
      expect(map[:allow_shared_tabs_metadata]).to eq(:allowSharedTabsMetadata)
      expect(map[:allow_signature_stamps]).to eq(:allowSignatureStamps)
      expect(map[:allow_signature_stamps_metadata]).to eq(:allowSignatureStampsMetadata)
      expect(map[:allow_sign_document_from_home_page]).to eq(:allowSignDocumentFromHomePage)
      expect(map[:allow_sign_document_from_home_page_metadata]).to eq(:allowSignDocumentFromHomePageMetadata)
      expect(map[:allow_signer_reassign]).to eq(:allowSignerReassign)
      expect(map[:allow_signer_reassign_metadata]).to eq(:allowSignerReassignMetadata)
      expect(map[:allow_signer_reassign_override]).to eq(:allowSignerReassignOverride)
      expect(map[:allow_signer_reassign_override_metadata]).to eq(:allowSignerReassignOverrideMetadata)
      expect(map[:allow_signing_extensions]).to eq(:allowSigningExtensions)
      expect(map[:allow_signing_extensions_metadata]).to eq(:allowSigningExtensionsMetadata)
      expect(map[:allow_signing_groups]).to eq(:allowSigningGroups)
      expect(map[:allow_signing_groups_metadata]).to eq(:allowSigningGroupsMetadata)
      expect(map[:allow_signing_radio_deselect]).to eq(:allowSigningRadioDeselect)
      expect(map[:allow_signing_radio_deselect_metadata]).to eq(:allowSigningRadioDeselectMetadata)
      expect(map[:allow_sign_now]).to eq(:allowSignNow)
      expect(map[:allow_sign_now_metadata]).to eq(:allowSignNowMetadata)
      expect(map[:allow_sms_delivery]).to eq(:allowSMSDelivery)
      expect(map[:allow_sms_delivery_metadata]).to eq(:allowSMSDeliveryMetadata)
      expect(map[:allow_social_id_login]).to eq(:allowSocialIdLogin)
      expect(map[:allow_social_id_login_metadata]).to eq(:allowSocialIdLoginMetadata)
      expect(map[:allow_supplemental_documents]).to eq(:allowSupplementalDocuments)
      expect(map[:allow_supplemental_documents_metadata]).to eq(:allowSupplementalDocumentsMetadata)
      expect(map[:allow_users_to_access_directory]).to eq(:allowUsersToAccessDirectory)
      expect(map[:allow_users_to_access_directory_metadata]).to eq(:allowUsersToAccessDirectoryMetadata)
      expect(map[:allow_value_insights]).to eq(:allowValueInsights)
      expect(map[:allow_value_insights_metadata]).to eq(:allowValueInsightsMetadata)
      expect(map[:anchor_population_scope]).to eq(:anchorPopulationScope)
      expect(map[:anchor_population_scope_metadata]).to eq(:anchorPopulationScopeMetadata)
      expect(map[:anchor_tag_versioned_placement_enabled]).to eq(:anchorTagVersionedPlacementEnabled)
      expect(map[:anchor_tag_versioned_placement_metadata_enabled]).to eq(:anchorTagVersionedPlacementMetadataEnabled)
      expect(map[:attach_completed_envelope]).to eq(:attachCompletedEnvelope)
      expect(map[:attach_completed_envelope_metadata]).to eq(:attachCompletedEnvelopeMetadata)
      expect(map[:authentication_check]).to eq(:authenticationCheck)
      expect(map[:authentication_check_metadata]).to eq(:authenticationCheckMetadata)
      expect(map[:auto_nav_rule]).to eq(:autoNavRule)
      expect(map[:auto_nav_rule_metadata]).to eq(:autoNavRuleMetadata)
      expect(map[:auto_provision_signer_account]).to eq(:autoProvisionSignerAccount)
      expect(map[:auto_provision_signer_account_metadata]).to eq(:autoProvisionSignerAccountMetadata)
      expect(map[:bcc_email_archive]).to eq(:bccEmailArchive)
      expect(map[:bcc_email_archive_metadata]).to eq(:bccEmailArchiveMetadata)
      expect(map[:beta_switch_configuration]).to eq(:betaSwitchConfiguration)
      expect(map[:beta_switch_configuration_metadata]).to eq(:betaSwitchConfigurationMetadata)
      expect(map[:billing_address]).to eq(:billingAddress)
      expect(map[:billing_address_metadata]).to eq(:billingAddressMetadata)
      expect(map[:bulk_send]).to eq(:bulkSend)
      expect(map[:bulk_send_max_copies_in_batch]).to eq(:bulkSendMaxCopiesInBatch)
      expect(map[:bulk_send_max_unprocessed_envelopes_count]).to eq(:bulkSendMaxUnprocessedEnvelopesCount)
      expect(map[:bulk_send_metadata]).to eq(:bulkSendMetadata)
      expect(map[:can_self_brand_send]).to eq(:canSelfBrandSend)
      expect(map[:can_self_brand_send_metadata]).to eq(:canSelfBrandSendMetadata)
      expect(map[:can_self_brand_sign]).to eq(:canSelfBrandSign)
      expect(map[:can_self_brand_sign_metadata]).to eq(:canSelfBrandSignMetadata)
      expect(map[:can_use_salesforce_o_auth]).to eq(:canUseSalesforceOAuth)
      expect(map[:can_use_salesforce_o_auth_metadata]).to eq(:canUseSalesforceOAuthMetadata)
      expect(map[:capture_voice_recording]).to eq(:captureVoiceRecording)
      expect(map[:capture_voice_recording_metadata]).to eq(:captureVoiceRecordingMetadata)
      expect(map[:cfr_use_wide_image]).to eq(:cfrUseWideImage)
      expect(map[:cfr_use_wide_image_metadata]).to eq(:cfrUseWideImageMetadata)
      expect(map[:check_for_multiple_admins_on_account]).to eq(:checkForMultipleAdminsOnAccount)
      expect(map[:check_for_multiple_admins_on_account_metadata]).to eq(:checkForMultipleAdminsOnAccountMetadata)
      expect(map[:chrome_signature_enabled]).to eq(:chromeSignatureEnabled)
      expect(map[:chrome_signature_enabled_metadata]).to eq(:chromeSignatureEnabledMetadata)
      expect(map[:comment_email_show_message_text]).to eq(:commentEmailShowMessageText)
      expect(map[:comment_email_show_message_text_metadata]).to eq(:commentEmailShowMessageTextMetadata)
      expect(map[:comments_allow_envelope_override]).to eq(:commentsAllowEnvelopeOverride)
      expect(map[:comments_allow_envelope_override_metadata]).to eq(:commentsAllowEnvelopeOverrideMetadata)
      expect(map[:conditional_fields_enabled]).to eq(:conditionalFieldsEnabled)
      expect(map[:conditional_fields_enabled_metadata]).to eq(:conditionalFieldsEnabledMetadata)
      expect(map[:consumer_disclosure_frequency]).to eq(:consumerDisclosureFrequency)
      expect(map[:consumer_disclosure_frequency_metadata]).to eq(:consumerDisclosureFrequencyMetadata)
      expect(map[:convert_pdf_fields]).to eq(:convertPdfFields)
      expect(map[:convert_pdf_fields_metadata]).to eq(:convertPdfFieldsMetadata)
      expect(map[:data_population_scope]).to eq(:dataPopulationScope)
      expect(map[:data_population_scope_metadata]).to eq(:dataPopulationScopeMetadata)
      expect(map[:disable_mobile_app]).to eq(:disableMobileApp)
      expect(map[:disable_mobile_app_metadata]).to eq(:disableMobileAppMetadata)
      expect(map[:disable_mobile_push_notifications]).to eq(:disableMobilePushNotifications)
      expect(map[:disable_mobile_push_notifications_metadata]).to eq(:disableMobilePushNotificationsMetadata)
      expect(map[:disable_mobile_sending]).to eq(:disableMobileSending)
      expect(map[:disable_mobile_sending_metadata]).to eq(:disableMobileSendingMetadata)
      expect(map[:disable_multiple_sessions]).to eq(:disableMultipleSessions)
      expect(map[:disable_multiple_sessions_metadata]).to eq(:disableMultipleSessionsMetadata)
      expect(map[:disable_purge_notifications_for_sender_metadata]).to eq(:disablePurgeNotificationsForSenderMetadata)
      expect(map[:disable_signer_cert_view]).to eq(:disableSignerCertView)
      expect(map[:disable_signer_cert_view_metadata]).to eq(:disableSignerCertViewMetadata)
      expect(map[:disable_signer_history_view]).to eq(:disableSignerHistoryView)
      expect(map[:disable_signer_history_view_metadata]).to eq(:disableSignerHistoryViewMetadata)
      expect(map[:disable_style_signature]).to eq(:disableStyleSignature)
      expect(map[:disable_style_signature_metadata]).to eq(:disableStyleSignatureMetadata)
      expect(map[:disable_upload_signature]).to eq(:disableUploadSignature)
      expect(map[:disable_upload_signature_metadata]).to eq(:disableUploadSignatureMetadata)
      expect(map[:disable_user_sharing]).to eq(:disableUserSharing)
      expect(map[:disable_user_sharing_metadata]).to eq(:disableUserSharingMetadata)
      expect(map[:display_beta_switch]).to eq(:displayBetaSwitch)
      expect(map[:display_beta_switch_metadata]).to eq(:displayBetaSwitchMetadata)
      expect(map[:document_conversion_restrictions]).to eq(:documentConversionRestrictions)
      expect(map[:document_conversion_restrictions_metadata]).to eq(:documentConversionRestrictionsMetadata)
      expect(map[:document_retention]).to eq(:documentRetention)
      expect(map[:document_retention_metadata]).to eq(:documentRetentionMetadata)
      expect(map[:document_retention_purge_tabs]).to eq(:documentRetentionPurgeTabs)
      expect(map[:document_visibility]).to eq(:documentVisibility)
      expect(map[:document_visibility_metadata]).to eq(:documentVisibilityMetadata)
      expect(map[:email_template_version]).to eq(:emailTemplateVersion)
      expect(map[:email_template_version_metadata]).to eq(:emailTemplateVersionMetadata)
      expect(map[:enable_access_code_generator]).to eq(:enableAccessCodeGenerator)
      expect(map[:enable_access_code_generator_metadata]).to eq(:enableAccessCodeGeneratorMetadata)
      expect(map[:enable_advanced_payments]).to eq(:enableAdvancedPayments)
      expect(map[:enable_advanced_payments_metadata]).to eq(:enableAdvancedPaymentsMetadata)
      expect(map[:enable_advanced_power_forms]).to eq(:enableAdvancedPowerForms)
      expect(map[:enable_advanced_power_forms_metadata]).to eq(:enableAdvancedPowerFormsMetadata)
      expect(map[:enable_agreement_actions_for_clm]).to eq(:enableAgreementActionsForCLM)
      expect(map[:enable_agreement_actions_for_clm_metadata]).to eq(:enableAgreementActionsForCLMMetadata)
      expect(map[:enable_agreement_actions_for_e_sign]).to eq(:enableAgreementActionsForESign)
      expect(map[:enable_agreement_actions_for_e_sign_metadata]).to eq(:enableAgreementActionsForESignMetadata)
      expect(map[:enable_auto_nav]).to eq(:enableAutoNav)
      expect(map[:enable_auto_nav_metadata]).to eq(:enableAutoNavMetadata)
      expect(map[:enable_calculated_fields]).to eq(:enableCalculatedFields)
      expect(map[:enable_calculated_fields_metadata]).to eq(:enableCalculatedFieldsMetadata)
      expect(map[:enable_clickwraps]).to eq(:enableClickwraps)
      expect(map[:enable_clickwraps_metadata]).to eq(:enableClickwrapsMetadata)
      expect(map[:enable_comments_history_download_in_signing]).to eq(:enableCommentsHistoryDownloadInSigning)
      expect(map[:enable_comments_history_download_in_signing_metadata]).to eq(:enableCommentsHistoryDownloadInSigningMetadata)
      expect(map[:enable_customer_satisfaction_metric_tracking]).to eq(:enableCustomerSatisfactionMetricTracking)
      expect(map[:enable_customer_satisfaction_metric_tracking_metadata]).to eq(:enableCustomerSatisfactionMetricTrackingMetadata)
      expect(map[:enable_ds_pro]).to eq(:enableDSPro)
      expect(map[:enable_ds_pro_metadata]).to eq(:enableDSProMetadata)
      expect(map[:enable_envelope_stamping_by_account_admin]).to eq(:enableEnvelopeStampingByAccountAdmin)
      expect(map[:enable_envelope_stamping_by_account_admin_metadata]).to eq(:enableEnvelopeStampingByAccountAdminMetadata)
      expect(map[:enable_envelope_stamping_by_ds_admin]).to eq(:enableEnvelopeStampingByDSAdmin)
      expect(map[:enable_envelope_stamping_by_ds_admin_metadata]).to eq(:enableEnvelopeStampingByDSAdminMetadata)
      expect(map[:enable_in_browser_editor]).to eq(:enableInBrowserEditor)
      expect(map[:enable_in_browser_editor_metadata]).to eq(:enableInBrowserEditorMetadata)
      expect(map[:enable_payment_processing]).to eq(:enablePaymentProcessing)
      expect(map[:enable_payment_processing_metadata]).to eq(:enablePaymentProcessingMetadata)
      expect(map[:enable_power_form]).to eq(:enablePowerForm)
      expect(map[:enable_power_form_direct]).to eq(:enablePowerFormDirect)
      expect(map[:enable_power_form_direct_metadata]).to eq(:enablePowerFormDirectMetadata)
      expect(map[:enable_power_form_metadata]).to eq(:enablePowerFormMetadata)
      expect(map[:enable_recipient_domain_validation]).to eq(:enableRecipientDomainValidation)
      expect(map[:enable_recipient_domain_validation_metadata]).to eq(:enableRecipientDomainValidationMetadata)
      expect(map[:enable_report_links]).to eq(:enableReportLinks)
      expect(map[:enable_report_links_metadata]).to eq(:enableReportLinksMetadata)
      expect(map[:enable_require_sign_on_paper]).to eq(:enableRequireSignOnPaper)
      expect(map[:enable_require_sign_on_paper_metadata]).to eq(:enableRequireSignOnPaperMetadata)
      expect(map[:enable_reserved_domain]).to eq(:enableReservedDomain)
      expect(map[:enable_reserved_domain_metadata]).to eq(:enableReservedDomainMetadata)
      expect(map[:enable_responsive_signing]).to eq(:enableResponsiveSigning)
      expect(map[:enable_responsive_signing_metadata]).to eq(:enableResponsiveSigningMetadata)
      expect(map[:enable_scheduled_release]).to eq(:enableScheduledRelease)
      expect(map[:enable_scheduled_release_metadata]).to eq(:enableScheduledReleaseMetadata)
      expect(map[:enable_search_ui]).to eq(:enableSearchUI)
      expect(map[:enable_search_ui_metadata]).to eq(:enableSearchUIMetadata)
      expect(map[:enable_sending_tags_font_settings]).to eq(:enableSendingTagsFontSettings)
      expect(map[:enable_sending_tags_font_settings_metadata]).to eq(:enableSendingTagsFontSettingsMetadata)
      expect(map[:enable_send_to_agent]).to eq(:enableSendToAgent)
      expect(map[:enable_send_to_agent_metadata]).to eq(:enableSendToAgentMetadata)
      expect(map[:enable_send_to_intermediary]).to eq(:enableSendToIntermediary)
      expect(map[:enable_send_to_intermediary_metadata]).to eq(:enableSendToIntermediaryMetadata)
      expect(map[:enable_send_to_manage]).to eq(:enableSendToManage)
      expect(map[:enable_send_to_manage_metadata]).to eq(:enableSendToManageMetadata)
      expect(map[:enable_sequential_signing_api]).to eq(:enableSequentialSigningAPI)
      expect(map[:enable_sequential_signing_api_metadata]).to eq(:enableSequentialSigningAPIMetadata)
      expect(map[:enable_sequential_signing_ui]).to eq(:enableSequentialSigningUI)
      expect(map[:enable_sequential_signing_ui_metadata]).to eq(:enableSequentialSigningUIMetadata)
      expect(map[:enable_signer_attachments]).to eq(:enableSignerAttachments)
      expect(map[:enable_signer_attachments_metadata]).to eq(:enableSignerAttachmentsMetadata)
      expect(map[:enable_signing_extension_comments]).to eq(:enableSigningExtensionComments)
      expect(map[:enable_signing_extension_comments_metadata]).to eq(:enableSigningExtensionCommentsMetadata)
      expect(map[:enable_signing_extension_conversations]).to eq(:enableSigningExtensionConversations)
      expect(map[:enable_signing_extension_conversations_metadata]).to eq(:enableSigningExtensionConversationsMetadata)
      expect(map[:enable_signing_order_settings_for_account]).to eq(:enableSigningOrderSettingsForAccount)
      expect(map[:enable_signing_order_settings_for_account_metadata]).to eq(:enableSigningOrderSettingsForAccountMetadata)
      expect(map[:enable_sign_on_paper]).to eq(:enableSignOnPaper)
      expect(map[:enable_sign_on_paper_metadata]).to eq(:enableSignOnPaperMetadata)
      expect(map[:enable_sign_on_paper_override]).to eq(:enableSignOnPaperOverride)
      expect(map[:enable_sign_on_paper_override_metadata]).to eq(:enableSignOnPaperOverrideMetadata)
      expect(map[:enable_sign_with_notary]).to eq(:enableSignWithNotary)
      expect(map[:enable_sign_with_notary_metadata]).to eq(:enableSignWithNotaryMetadata)
      expect(map[:enable_smart_contracts]).to eq(:enableSmartContracts)
      expect(map[:enable_smart_contracts_metadata]).to eq(:enableSmartContractsMetadata)
      expect(map[:enable_sms_authentication]).to eq(:enableSMSAuthentication)
      expect(map[:enable_sms_authentication_metadata]).to eq(:enableSMSAuthenticationMetadata)
      expect(map[:enable_social_id_login]).to eq(:enableSocialIdLogin)
      expect(map[:enable_social_id_login_metadata]).to eq(:enableSocialIdLoginMetadata)
      expect(map[:enable_strike_through]).to eq(:enableStrikeThrough)
      expect(map[:enable_strike_through_metadata]).to eq(:enableStrikeThroughMetadata)
      expect(map[:enable_transaction_point]).to eq(:enableTransactionPoint)
      expect(map[:enable_transaction_point_metadata]).to eq(:enableTransactionPointMetadata)
      expect(map[:enable_vaulting]).to eq(:enableVaulting)
      expect(map[:enable_vaulting_metadata]).to eq(:enableVaultingMetadata)
      expect(map[:enable_witnessing]).to eq(:enableWitnessing)
      expect(map[:enable_witnessing_metadata]).to eq(:enableWitnessingMetadata)
      expect(map[:enforce_template_name_uniqueness]).to eq(:enforceTemplateNameUniqueness)
      expect(map[:enforce_template_name_uniqueness_metadata]).to eq(:enforceTemplateNameUniquenessMetadata)
      expect(map[:envelope_integration_allowed]).to eq(:envelopeIntegrationAllowed)
      expect(map[:envelope_integration_allowed_metadata]).to eq(:envelopeIntegrationAllowedMetadata)
      expect(map[:envelope_integration_enabled]).to eq(:envelopeIntegrationEnabled)
      expect(map[:envelope_integration_enabled_metadata]).to eq(:envelopeIntegrationEnabledMetadata)
      expect(map[:envelope_stamping_default_value]).to eq(:envelopeStampingDefaultValue)
      expect(map[:envelope_stamping_default_value_metadata]).to eq(:envelopeStampingDefaultValueMetadata)
      expect(map[:express_send]).to eq(:expressSend)
      expect(map[:express_send_allow_tabs]).to eq(:expressSendAllowTabs)
      expect(map[:express_send_allow_tabs_metadata]).to eq(:expressSendAllowTabsMetadata)
      expect(map[:express_send_metadata]).to eq(:expressSendMetadata)
      expect(map[:external_document_sources]).to eq(:externalDocumentSources)
      expect(map[:external_signature_pad_type]).to eq(:externalSignaturePadType)
      expect(map[:external_signature_pad_type_metadata]).to eq(:externalSignaturePadTypeMetadata)
      expect(map[:fax_out_enabled]).to eq(:faxOutEnabled)
      expect(map[:fax_out_enabled_metadata]).to eq(:faxOutEnabledMetadata)
      expect(map[:guided_forms_html_allowed]).to eq(:guidedFormsHtmlAllowed)
      expect(map[:guided_forms_html_allowed_metadata]).to eq(:guidedFormsHtmlAllowedMetadata)
      expect(map[:hide_account_address_in_co_c]).to eq(:hideAccountAddressInCoC)
      expect(map[:hide_account_address_in_co_c_metadata]).to eq(:hideAccountAddressInCoCMetadata)
      expect(map[:hide_pricing]).to eq(:hidePricing)
      expect(map[:hide_pricing_metadata]).to eq(:hidePricingMetadata)
      expect(map[:id_check_configurations]).to eq(:idCheckConfigurations)
      expect(map[:id_check_expire]).to eq(:idCheckExpire)
      expect(map[:id_check_expire_days]).to eq(:idCheckExpireDays)
      expect(map[:id_check_expire_days_metadata]).to eq(:idCheckExpireDaysMetadata)
      expect(map[:id_check_expire_metadata]).to eq(:idCheckExpireMetadata)
      expect(map[:id_check_expire_minutes]).to eq(:idCheckExpireMinutes)
      expect(map[:id_check_expire_minutes_metadata]).to eq(:idCheckExpireMinutesMetadata)
      expect(map[:id_check_required]).to eq(:idCheckRequired)
      expect(map[:id_check_required_metadata]).to eq(:idCheckRequiredMetadata)
      expect(map[:identity_verification]).to eq(:identityVerification)
      expect(map[:identity_verification_metadata]).to eq(:identityVerificationMetadata)
      expect(map[:ignore_error_if_anchor_tab_not_found]).to eq(:ignoreErrorIfAnchorTabNotFound)
      expect(map[:ignore_error_if_anchor_tab_not_found_metadata_enabled]).to eq(:ignoreErrorIfAnchorTabNotFoundMetadataEnabled)
      expect(map[:in_person_id_check_question]).to eq(:inPersonIDCheckQuestion)
      expect(map[:in_person_id_check_question_metadata]).to eq(:inPersonIDCheckQuestionMetadata)
      expect(map[:in_person_signing_enabled]).to eq(:inPersonSigningEnabled)
      expect(map[:in_person_signing_enabled_metadata]).to eq(:inPersonSigningEnabledMetadata)
      expect(map[:in_session_enabled]).to eq(:inSessionEnabled)
      expect(map[:in_session_enabled_metadata]).to eq(:inSessionEnabledMetadata)
      expect(map[:in_session_suppress_emails]).to eq(:inSessionSuppressEmails)
      expect(map[:in_session_suppress_emails_metadata]).to eq(:inSessionSuppressEmailsMetadata)
      expect(map[:maximum_signing_groups]).to eq(:maximumSigningGroups)
      expect(map[:maximum_signing_groups_metadata]).to eq(:maximumSigningGroupsMetadata)
      expect(map[:maximum_users_per_signing_group]).to eq(:maximumUsersPerSigningGroup)
      expect(map[:maximum_users_per_signing_group_metadata]).to eq(:maximumUsersPerSigningGroupMetadata)
      expect(map[:max_number_of_custom_stamps]).to eq(:maxNumberOfCustomStamps)
      expect(map[:mobile_session_timeout]).to eq(:mobileSessionTimeout)
      expect(map[:mobile_session_timeout_metadata]).to eq(:mobileSessionTimeoutMetadata)
      expect(map[:number_of_active_custom_stamps]).to eq(:numberOfActiveCustomStamps)
      expect(map[:opt_in_mobile_signing_v02]).to eq(:optInMobileSigningV02)
      expect(map[:opt_in_mobile_signing_v02_metadata]).to eq(:optInMobileSigningV02Metadata)
      expect(map[:opt_out_auto_nav_text_and_tab_color_updates]).to eq(:optOutAutoNavTextAndTabColorUpdates)
      expect(map[:opt_out_auto_nav_text_and_tab_color_updates_metadata]).to eq(:optOutAutoNavTextAndTabColorUpdatesMetadata)
      expect(map[:opt_out_new_platform_seal]).to eq(:optOutNewPlatformSeal)
      expect(map[:opt_out_new_platform_seal_platform_metadata]).to eq(:optOutNewPlatformSealPlatformMetadata)
      expect(map[:phone_auth_recipient_may_provide_phone_number]).to eq(:phoneAuthRecipientMayProvidePhoneNumber)
      expect(map[:phone_auth_recipient_may_provide_phone_number_metadata]).to eq(:phoneAuthRecipientMayProvidePhoneNumberMetadata)
      expect(map[:pki_sign_downloaded_pdf_docs]).to eq(:pkiSignDownloadedPDFDocs)
      expect(map[:pki_sign_downloaded_pdf_docs_metadata]).to eq(:pkiSignDownloadedPDFDocsMetadata)
      expect(map[:recipients_can_sign_offline]).to eq(:recipientsCanSignOffline)
      expect(map[:recipients_can_sign_offline_metadata]).to eq(:recipientsCanSignOfflineMetadata)
      expect(map[:recipient_signing_auto_navigation_control]).to eq(:recipientSigningAutoNavigationControl)
      expect(map[:recipient_signing_auto_navigation_control_metadata]).to eq(:recipientSigningAutoNavigationControlMetadata)
      expect(map[:require21_cf_rpt11_compliance]).to eq(:require21CFRpt11Compliance)
      expect(map[:require21_cf_rpt11_compliance_metadata]).to eq(:require21CFRpt11ComplianceMetadata)
      expect(map[:require_decline_reason]).to eq(:requireDeclineReason)
      expect(map[:require_decline_reason_metadata]).to eq(:requireDeclineReasonMetadata)
      expect(map[:require_external_user_management]).to eq(:requireExternalUserManagement)
      expect(map[:require_external_user_management_metadata]).to eq(:requireExternalUserManagementMetadata)
      expect(map[:require_signer_certificate_type]).to eq(:requireSignerCertificateType)
      expect(map[:require_signer_certificate_type_metadata]).to eq(:requireSignerCertificateTypeMetadata)
      expect(map[:rsa_verid_account_name]).to eq(:rsaVeridAccountName)
      expect(map[:rsa_verid_password]).to eq(:rsaVeridPassword)
      expect(map[:rsa_verid_ruleset]).to eq(:rsaVeridRuleset)
      expect(map[:rsa_verid_user_id]).to eq(:rsaVeridUserId)
      expect(map[:self_signed_recipient_email_document]).to eq(:selfSignedRecipientEmailDocument)
      expect(map[:self_signed_recipient_email_document_metadata]).to eq(:selfSignedRecipientEmailDocumentMetadata)
      expect(map[:self_signed_recipient_email_document_user_override]).to eq(:selfSignedRecipientEmailDocumentUserOverride)
      expect(map[:self_signed_recipient_email_document_user_override_metadata]).to eq(:selfSignedRecipientEmailDocumentUserOverrideMetadata)
      expect(map[:sender_can_sign_in_each_location]).to eq(:senderCanSignInEachLocation)
      expect(map[:sender_can_sign_in_each_location_metadata]).to eq(:senderCanSignInEachLocationMetadata)
      expect(map[:sender_must_authenticate_signing]).to eq(:senderMustAuthenticateSigning)
      expect(map[:sender_must_authenticate_signing_metadata]).to eq(:senderMustAuthenticateSigningMetadata)
      expect(map[:sending_tags_font_color]).to eq(:sendingTagsFontColor)
      expect(map[:sending_tags_font_color_metadata]).to eq(:sendingTagsFontColorMetadata)
      expect(map[:sending_tags_font_name]).to eq(:sendingTagsFontName)
      expect(map[:sending_tags_font_name_metadata]).to eq(:sendingTagsFontNameMetadata)
      expect(map[:sending_tags_font_size]).to eq(:sendingTagsFontSize)
      expect(map[:sending_tags_font_size_metadata]).to eq(:sendingTagsFontSizeMetadata)
      expect(map[:send_to_certified_delivery_enabled]).to eq(:sendToCertifiedDeliveryEnabled)
      expect(map[:send_to_certified_delivery_enabled_metadata]).to eq(:sendToCertifiedDeliveryEnabledMetadata)
      expect(map[:session_timeout]).to eq(:sessionTimeout)
      expect(map[:session_timeout_metadata]).to eq(:sessionTimeoutMetadata)
      expect(map[:set_recip_email_lang]).to eq(:setRecipEmailLang)
      expect(map[:set_recip_email_lang_metadata]).to eq(:setRecipEmailLangMetadata)
      expect(map[:set_recip_sign_lang]).to eq(:setRecipSignLang)
      expect(map[:set_recip_sign_lang_metadata]).to eq(:setRecipSignLangMetadata)
      expect(map[:shared_template_folders]).to eq(:sharedTemplateFolders)
      expect(map[:shared_template_folders_metadata]).to eq(:sharedTemplateFoldersMetadata)
      expect(map[:show_complete_dialog_in_embedded_session]).to eq(:showCompleteDialogInEmbeddedSession)
      expect(map[:show_complete_dialog_in_embedded_session_metadata]).to eq(:showCompleteDialogInEmbeddedSessionMetadata)
      expect(map[:show_conditional_routing_on_send]).to eq(:showConditionalRoutingOnSend)
      expect(map[:show_conditional_routing_on_send_metadata]).to eq(:showConditionalRoutingOnSendMetadata)
      expect(map[:show_initial_conditional_fields]).to eq(:showInitialConditionalFields)
      expect(map[:show_initial_conditional_fields_metadata]).to eq(:showInitialConditionalFieldsMetadata)
      expect(map[:show_localized_watermarks]).to eq(:showLocalizedWatermarks)
      expect(map[:show_localized_watermarks_metadata]).to eq(:showLocalizedWatermarksMetadata)
      expect(map[:show_tutorials]).to eq(:showTutorials)
      expect(map[:show_tutorials_metadata]).to eq(:showTutorialsMetadata)
      expect(map[:signature_providers]).to eq(:signatureProviders)
      expect(map[:signature_providers_metadata]).to eq(:signatureProvidersMetadata)
      expect(map[:sign_date_format]).to eq(:signDateFormat)
      expect(map[:sign_date_format_metadata]).to eq(:signDateFormatMetadata)
      expect(map[:signer_attach_certificate_to_envelope_pdf]).to eq(:signerAttachCertificateToEnvelopePDF)
      expect(map[:signer_attach_certificate_to_envelope_pdf_metadata]).to eq(:signerAttachCertificateToEnvelopePDFMetadata)
      expect(map[:signer_attach_concat]).to eq(:signerAttachConcat)
      expect(map[:signer_attach_concat_metadata]).to eq(:signerAttachConcatMetadata)
      expect(map[:signer_can_create_account]).to eq(:signerCanCreateAccount)
      expect(map[:signer_can_create_account_metadata]).to eq(:signerCanCreateAccountMetadata)
      expect(map[:signer_can_sign_on_mobile]).to eq(:signerCanSignOnMobile)
      expect(map[:signer_can_sign_on_mobile_metadata]).to eq(:signerCanSignOnMobileMetadata)
      expect(map[:signer_in_session_use_envelope_complete_email]).to eq(:signerInSessionUseEnvelopeCompleteEmail)
      expect(map[:signer_in_session_use_envelope_complete_email_metadata]).to eq(:signerInSessionUseEnvelopeCompleteEmailMetadata)
      expect(map[:signer_login_requirements]).to eq(:signerLoginRequirements)
      expect(map[:signer_login_requirements_metadata]).to eq(:signerLoginRequirementsMetadata)
      expect(map[:signer_must_have_account]).to eq(:signerMustHaveAccount)
      expect(map[:signer_must_have_account_metadata]).to eq(:signerMustHaveAccountMetadata)
      expect(map[:signer_must_login_to_sign]).to eq(:signerMustLoginToSign)
      expect(map[:signer_must_login_to_sign_metadata]).to eq(:signerMustLoginToSignMetadata)
      expect(map[:signer_show_secure_field_initial_values]).to eq(:signerShowSecureFieldInitialValues)
      expect(map[:signer_show_secure_field_initial_values_metadata]).to eq(:signerShowSecureFieldInitialValuesMetadata)
      expect(map[:signing_session_timeout]).to eq(:signingSessionTimeout)
      expect(map[:signing_session_timeout_metadata]).to eq(:signingSessionTimeoutMetadata)
      expect(map[:signing_ui_version]).to eq(:signingUiVersion)
      expect(map[:signing_ui_version_metadata]).to eq(:signingUiVersionMetadata)
      expect(map[:sign_time_format]).to eq(:signTimeFormat)
      expect(map[:sign_time_format_metadata]).to eq(:signTimeFormatMetadata)
      expect(map[:sign_time_show_am_pm]).to eq(:signTimeShowAmPm)
      expect(map[:sign_time_show_am_pm_metadata]).to eq(:signTimeShowAmPmMetadata)
      expect(map[:simplified_sending_enabled]).to eq(:simplifiedSendingEnabled)
      expect(map[:simplified_sending_enabled_metadata]).to eq(:simplifiedSendingEnabledMetadata)
      expect(map[:single_sign_on_enabled]).to eq(:singleSignOnEnabled)
      expect(map[:single_sign_on_enabled_metadata]).to eq(:singleSignOnEnabledMetadata)
      expect(map[:skip_auth_completed_envelopes]).to eq(:skipAuthCompletedEnvelopes)
      expect(map[:skip_auth_completed_envelopes_metadata]).to eq(:skipAuthCompletedEnvelopesMetadata)
      expect(map[:social_id_recip_auth]).to eq(:socialIdRecipAuth)
      expect(map[:social_id_recip_auth_metadata]).to eq(:socialIdRecipAuthMetadata)
      expect(map[:specify_document_visibility]).to eq(:specifyDocumentVisibility)
      expect(map[:specify_document_visibility_metadata]).to eq(:specifyDocumentVisibilityMetadata)
      expect(map[:start_in_advanced_correct]).to eq(:startInAdvancedCorrect)
      expect(map[:start_in_advanced_correct_metadata]).to eq(:startInAdvancedCorrectMetadata)
      expect(map[:supplemental_documents_must_accept]).to eq(:supplementalDocumentsMustAccept)
      expect(map[:supplemental_documents_must_accept_metadata]).to eq(:supplementalDocumentsMustAcceptMetadata)
      expect(map[:supplemental_documents_must_read]).to eq(:supplementalDocumentsMustRead)
      expect(map[:supplemental_documents_must_read_metadata]).to eq(:supplementalDocumentsMustReadMetadata)
      expect(map[:supplemental_documents_must_view]).to eq(:supplementalDocumentsMustView)
      expect(map[:supplemental_documents_must_view_metadata]).to eq(:supplementalDocumentsMustViewMetadata)
      expect(map[:suppress_certificate_enforcement]).to eq(:suppressCertificateEnforcement)
      expect(map[:suppress_certificate_enforcement_metadata]).to eq(:suppressCertificateEnforcementMetadata)
      expect(map[:tab_account_settings]).to eq(:tabAccountSettings)
      expect(map[:timezone_offset_api]).to eq(:timezoneOffsetAPI)
      expect(map[:timezone_offset_api_metadata]).to eq(:timezoneOffsetAPIMetadata)
      expect(map[:timezone_offset_ui]).to eq(:timezoneOffsetUI)
      expect(map[:timezone_offset_ui_metadata]).to eq(:timezoneOffsetUIMetadata)
      expect(map[:universal_signature_opt_in]).to eq(:universalSignatureOptIn)
      expect(map[:use_account_level_email]).to eq(:useAccountLevelEmail)
      expect(map[:use_account_level_email_metadata]).to eq(:useAccountLevelEmailMetadata)
      expect(map[:use_consumer_disclosure]).to eq(:useConsumerDisclosure)
      expect(map[:use_consumer_disclosure_metadata]).to eq(:useConsumerDisclosureMetadata)
      expect(map[:use_consumer_disclosure_within_account]).to eq(:useConsumerDisclosureWithinAccount)
      expect(map[:use_consumer_disclosure_within_account_metadata]).to eq(:useConsumerDisclosureWithinAccountMetadata)
      expect(map[:use_derived_keys]).to eq(:useDerivedKeys)
      expect(map[:use_derived_keys_metadata]).to eq(:useDerivedKeysMetadata)
      expect(map[:use_docu_sign_express_signer_certificate]).to eq(:useDocuSignExpressSignerCertificate)
      expect(map[:use_docu_sign_express_signer_certificate_metadata]).to eq(:useDocuSignExpressSignerCertificateMetadata)
      expect(map[:use_multi_app_groups_data]).to eq(:useMultiAppGroupsData)
      expect(map[:use_multi_app_groups_data_metadata]).to eq(:useMultiAppGroupsDataMetadata)
      expect(map[:use_new_blob_for_pdf]).to eq(:useNewBlobForPdf)
      expect(map[:use_new_blob_for_pdf_metadata]).to eq(:useNewBlobForPdfMetadata)
      expect(map[:use_safe_signer_certificates]).to eq(:useSAFESignerCertificates)
      expect(map[:use_safe_signer_certificates_metadata]).to eq(:useSAFESignerCertificatesMetadata)
      expect(map[:uses_api]).to eq(:usesAPI)
      expect(map[:uses_api_metadata]).to eq(:usesAPIMetadata)
      expect(map[:use_signature_provider_platform]).to eq(:useSignatureProviderPlatform)
      expect(map[:use_signature_provider_platform_metadata]).to eq(:useSignatureProviderPlatformMetadata)
      expect(map[:validations_allowed]).to eq(:validationsAllowed)
      expect(map[:validations_allowed_metadata]).to eq(:validationsAllowedMetadata)
      expect(map[:validations_brand]).to eq(:validationsBrand)
      expect(map[:validations_brand_metadata]).to eq(:validationsBrandMetadata)
      expect(map[:validations_cadence]).to eq(:validationsCadence)
      expect(map[:validations_cadence_metadata]).to eq(:validationsCadenceMetadata)
      expect(map[:validations_enabled]).to eq(:validationsEnabled)
      expect(map[:validations_enabled_metadata]).to eq(:validationsEnabledMetadata)
      expect(map[:validations_report]).to eq(:validationsReport)
      expect(map[:validations_report_metadata]).to eq(:validationsReportMetadata)
      expect(map[:water_mark_enabled]).to eq(:waterMarkEnabled)
      expect(map[:water_mark_enabled_metadata]).to eq(:waterMarkEnabledMetadata)
      expect(map[:write_reminder_to_envelope_history]).to eq(:writeReminderToEnvelopeHistory)
      expect(map[:write_reminder_to_envelope_history_metadata]).to eq(:writeReminderToEnvelopeHistoryMetadata)
      expect(map[:wurfl_min_allowable_screen_size]).to eq(:wurflMinAllowableScreenSize)
      expect(map[:wurfl_min_allowable_screen_size_metadata]).to eq(:wurflMinAllowableScreenSizeMetadata)
    end
  end
end